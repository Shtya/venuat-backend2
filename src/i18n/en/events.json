{
  "equipment" : {
    "not_found_for_venue" :"equipment with ID {serviceId} not found for venue with ID {venueId}",
    "updated" : "updated successfully"
  },
  "updated" : "updated successfully",
  "otp_valid": "OTP is valid.",
  "price_must_be_Number": "The price must be a valid number.",
  "refresh_token_required": "Refresh token is required.",
  "code_must_be_unique": "The code must be unique.",
  "website_settings_not_found": "Website settings with ID {id} not found.",
  "service_not_exist": "The service does not exist.",
  "check_your_email_for_verification" : "Please check your email to verify your account.",
  "success": "Registration successful!",
  "some_policies_not_found" : "Some policies not found in the list of policies",


    "otp_sent2": "OTP sent to email, please verify your account",
    "user_not_found": "User not found!",
    "user_already_verified": "User already verified!",
    "invalid_or_expired_otp": "Invalid or expired OTP!",
    "account_verified_successfully": "Account verified successfully. You can now sign in.",
    "user_not_found_repeat": "User not found!",
    "user_already_verified_or_invalid_request": "User already verified or the request is invalid!",
    "new_otp_sent": "New OTP sent to your email. Please verify your account.",  


  "startDateRequired": "Start date is required.",
  "startDateMustBeDate": "Start date must be a valid date.",
  "endDateRequired": "End date is required.",
  "endDateMustBeDate": "End date must be a valid date.",

  "pages_setting_empty": "Page settings must be entered.",
  "pages_setting_invalid_array": "Page settings must be an array.",
  "pages_setting_invalid_object": "Each item in page settings must be a valid object.",
  "terms_conditions_empty": "Terms and conditions must be entered.",
  "terms_conditions_invalid_object": "Terms and conditions must be a valid JSON object.",
  "faq_empty": "FAQ must be entered.",
  "faq_invalid_array": "FAQ must be an array.",
  "faq_invalid_object": "Each item in FAQ must be a valid object.",

  "model_id_invalid": "The model ID must be a number or a string representing a number.",
  "model_id_required": "Model ID is required.",
  "name_invalid": "The name must be a string.",
  "name_required": "Name is required.",
  "file_name_invalid": "The file name must be a string.",
  "mime_type_invalid": "The MIME type must be a string.",
  "disk_invalid": "The disk must be a string.",
  "size_invalid": "The size must be a number or a string representing a number.",
  "manipulations_invalid": "Manipulations must be a valid JSON object.",
  "custom_properties_invalid": "Custom properties must be a valid JSON object.",
  "order_invalid": "The order must be a number or a string representing a number.",
  "order_required": "Order is required.",
  "folder_invalid": "The folder must be a string.",
  "folder_required": "Folder name is required.",
  "collection_invalid": "The collection must be a string.",
  "collection_required": "Collection name is required.",

  "feature_not_found": "Feature with ID {featureId} not found.",
  "feature_not_found_for_venue": "Feature with ID {featureId} not found for venues with ID {venueId}.",
  "feature_removed_from_venue": "Feature with ID {featureId} has been removed from venues with ID {venueId}.",
  "feature_added_to_venue": "Feature with ID {featureId} has been added to venues with ID {venueId}.",

  "file_required": "File is required.",
  "media_not_found_by_id": "Media with ID {id} not found.",
  "media_not_found_by_filename": "Media with file name {fileName} not found.",
  "media_deleted_success": "Media deleted successfully.",

  "permissions_array_required": "Permissions array is required.",
  "permission_name_invalid": "Permission name must be a string.",
  "permission_name_required": "Permission name is required.",
  "role_already_exists": "Role ({name}) already exists.",
  "role_not_found": "Role not found.",
  "role_name_unique": "Role name must be unique.",
  "permissions_not_found": "Some permissions not found.",
  "invalid_permissions": "One or more permissions are invalid.",

  "permissions_already_exist": "Some permissions already exist.",
  "permission_name_unique": "Permission name must be unique.",

  "role_required1": "Role is required.",
  "role_invalid1": "Role must be one of the allowed values.",
  "permissions_array_invalid": "Permissions must be in array format.",
  "permission_must_be_number": "Each permission must be an integer.",
  "permission_ids_array_invalid": "Permission IDs must be in array format of numbers.",
  "permission_ids_required": "Permission IDs are required.",
  "permission_ids_min_size": "At least one permission ID must be entered.",
  "permission_id_must_be_number": "Each permission ID must be an integer.",
  "permission_id_must_be_positive": "Each permission ID must be a positive number.",
  "date_range_overlap": "Date range overlaps with an existing entry for this venue.",
  "dateFromMustBeValid": "Start date must be valid",
  "dateFromRequired": "Start date is required",
  "dateToMustBeValid": "End date must be valid",
  "dateToRequired": "End date is required",
  "media_not_found": "Media with ID {icon_media_id} not found.",
  "policyNameMustBeObject": "Policy name must be a JSON object",
  "policyNameRequired": "Policy name is required",
  "policyDescriptionMustBeObject": "Policy description must be a JSON object",
  "policyDescriptionRequired": "Policy description is required",
  "policyIdMustBeNumber": "Policy ID must be a number",
  "policyIdRequired": "Policy ID is required",

  "events.feature_name_required": "Feature name is required.",
  "events.feature_name_invalid": "Feature name must be a JSON object.",
  "events.icon_media_id_invalid": "Icon media ID must be an integer.",
  "events.feature_id_required": "Feature ID is required.",
  "events.feature_id_invalid": "Feature ID must be an integer.",

  "policy_not_found": "Policy with ID {policy_id} not found.",
  "policy_not_found_for_venue": "Policy with ID {policyId} not found for venue with ID {venueId}.",
  "policy_removed_from_venue": "Policy with ID {policyId} has been removed from venue with ID {venueId}.",

  "user_not_exist": "The specified user does not exist.",
  "venue_not_exist": "The requested venue does not exist.",
  "package_not_exist": "The specified package is not available.",
  "venue_already_reserved": "The venue is already reserved from {from_time} to {to_time} on {check_in}. Please choose another time.",

  "venue_not_found2": "Venue with ID {venue_id} not found.",
  "userIdRequired": "User ID is required",
  "userIdMustBeNumber": "User ID must be a number",
  "venueIdRequired": "Venue ID is required",
  "venueIdMustBeNumber": "Venue ID must be a number",
  "questionMustBeObject": "Question must be a JSON object",
  "questionRequired": "Question is required",
  "answerMustBeObject": "Answer must be a JSON object",
  "answerRequired": "Answer is required",
  "packageIdRequired": "Package ID is required",
  "packageIdMustBeNumber": "Package ID must be a number",
  "packageDetailsRequired": "Package details are required",
  "reservationStatusRequired": "Reservation status is required",
  "invalidReservationStatus": "Invalid reservation status",
  "checkInDateRequired": "Check-in date is required",
  "checkInMustBeDate": "Check-in date must be a valid date",
  "checkOutDateRequired": "Check-out date is required",
  "checkOutMustBeDate": "Check-out date must be a valid date",
  "startTimeRequired": "Start time is required",
  "startTimeMustBeString": "Start time must be a valid string in (HH:MM:SS) format",
  "endTimeRequired": "End time is required",
  "endTimeMustBeString": "End time must be a valid string in (HH:MM:SS) format",
  "totalPriceRequired": "Total price is required",
  "totalPriceMustBeNumber": "Total price must be a number",
  "paymentMethodRequired": "Payment method is required",
  "paymentMethodMustBeString": "Payment method must be a valid string",

  "packageNameRequired": "Package name is required",
  "packageNameMustBeObject": "Package name must be an object",

  "serviceIdRequired": "Service ID is required",
  "serviceIdMustBeNumber": "Service ID must be a number",
  "priceRequired": "Price is required",
  "priceMustBeNumber": "Price must be a number",

  "equipment_not_found2": "The specified equipment not found.",
  "package_not_found": "The specified package not found.",

  "equipmentIdRequired": "Equipment ID is required",
  "equipmentIdMustBeNumber": "Equipment ID must be a number",
  "countRequired": "Count is required",
  "countMustBeNumber": "Count must be a number",

  ".": "No user with this email exists.",
  "password_reset_link_sent": "Password reset link has been sent to your email.",
  "password_mismatch": "New password and confirm password do not match.",
  "password_reset_success": "Password reset successfully.",
  "email_already_exists": "Email already exists.",
  "invalid_credentials": "Invalid credentials.",
  "account_inactive": "Your account is inactive. Please contact support.",
  "invalid_email_or_password": "Invalid email or password.",
  "invalid_object_id": "This is not a valid MongoDB ID.",
  "not_found_in_database": "This record does not exist in the database.",
  "invalid_role": "Invalid role. Role must be either 'admin' or 'user'.",
  "invalid_status": "Invalid status. Status must be either 'active' or 'inActive'.",
  "invalid_refresh_token": "Invalid refresh token.",
  "._generic": "User not found.",
  "invalid_or_missing_token": "Token is invalid or missing.",
  "invalid_token": "Token is invalid.",
  "sign_in_required": "You must sign in to access this route.",
  "permission_denied": "You do not have permission to access this resource.",
  "invalid_or_expired_token": "Token is invalid or expired.",
  "vendor_no_found": "Vendor with ID {id} not found.",
  "vendor_deleted": "Vendor with ID {id} deleted successfully.",
  "user_inactive": "Your account is currently inactive. Please contact support for assistance.",
  "phone_already_exists": "This phone number already exists.",
  "try_after_5min": "Please wait {remainingTime} seconds before requesting another verification code.",
  "otp_sent": "Verification code has been sent to your email. Please check your inbox.",
  "current_password_required": "Current password is required.",
  "current_password_incorrect": "Current password is incorrect.",

  "venue_not_found": "The specified venue not found.",
  "gallery_not_found": "Gallery with ID {id} not found.",

  "full_name": "Full name must be a string.",
  "full_name_required": "Full name is required.",
  "email_invalid": "Invalid email format.",
  "email_required": "Email is required.",
  "phone_required": "Phone number is required.",
  "password_invalid": "Password must be a string.",
  "password_required": "Password is required.",
  "role_invalid": "Role must be one of the following: (user , vendor, admin)",
  "role_required": "Role is required.",
  "status_invalid": "Status must be either active or inactive.",
  "avatar_invalid": "Avatar must be a string.",
  "notFound": "This record with ID not found.",

  "venueIdMustBePositive": "Venue ID must be a positive number",
  "imgsMustBeArray": "Images must be in array format",
  "imgsMinOneRequired": "At least one image must be uploaded",
  "imgsMustBeString": "Each item in the array must be a string (URL)",

  "validation": {
    "name": { "minLength": "Name must be at least 3 characters." },
    "email": { "required": "Email is required." },
    "password": { "minLength": "Password must be at least 3 characters." },
    "role": {
      "invalid": "Permission must be either 'admin' or 'user'."
    },
    "status": {
      "invalid": "Status must be either 'active' or 'inactive'."
    },
    "vendor": {
      "multilingual": {
        "en": "English field must be a string.",
        "ar": "Arabic field must be a string."
      },
      "property_name": {
        "object": "Property name must be an object."
      },
      "occasion_type": {
        "object": "Occasion type must be an object."
      },
      "operating_system": {
        "string": "Operating system must be a string."
      },
      "joined_date": {
        "date": "Join date must be a valid date."
      },
      "overall_revenue": {
        "number": "Total revenue must be a number."
      },
      "location": {
        "object": "Location must be an object.",
        "string": "Location must be a string."
      },
      "address": {
        "object": "Address must be an object."
      },
      "mobile": {
        "string": "Mobile number must be a string."
      },
      "email": {
        "string": "Email must be a string."
      },
      "contact_person": {
        "object": "Contact person must be an object."
      }
    },
    "user": {
      "name": {
        "string": "Name must be a string.",
        "minLength": "Name must be at least 3 characters."
      },
      "email": {
        "email": "Invalid email format."
      },
      "password": {
        "string": "Password must be a string.",
        "minLength": "Password must be at least 3 characters."
      },
      "role": {
        "enum": "Permission must be either 'admin' or 'user'."
      },
      "avatar": {
        "string": "Avatar must be a string."
      },
      "status": {
        "enum": "Status must be either 'active' or 'inactive'."
      },
      "phone": {
        "string": "Phone must be a string."
      },
      "gender": {
        "enum": "Gender must be either 'male', 'female', or 'none'."
      }
    },
    "finance": {
      "vendorName.object": "vendorName must be an object containing 'en' and 'ar' properties",
      "vendorName.required": "vendorName is required",
      "balance.number": "balance must be a number",
      "balance.required": "balance is required",
      "balanceWithdrawn.number": "balanceWithdrawn must be a number",
      "balanceWithdrawn.required": "balanceWithdrawn is required",
      "remainingBalance.number": "remainingBalance must be a number",
      "remainingBalance.required": "remainingBalance is required",
      "bankName.string": "bankName must be a string",
      "bankName.required": "bankName is required",
      "accountNumber.string": "accountNumber must be a string",
      "accountNumber.required": "accountNumber is required",
      "iban.string": "iban must be a string",
      "iban.required": "iban is required",
      "balanceAfterTransaction.number": "balanceAfterTransaction must be a number",
      "balanceAfterTransaction.required": "balanceAfterTransaction is required",
      "balanceBeforeTransaction.number": "balanceBeforeTransaction must be a number",
      "balanceBeforeTransaction.required": "balanceBeforeTransaction is required",
      "to.string": "to must be a string",
      "to.required": "to is required",
      "invalid": "Invalid pagination parameters. 'page' and 'limit' must be positive numbers.",
      "deleted": "Finance record with ID {id} deleted successfully."
    },
    "date_required": "Date is required.",
    "venue_name_required": "Venue name is required.",
    "event_type_required": "Event type is required.",
    "booking_price_required": "Booking price is required.",
    "venue_name_error": "Venue name must be a string and less than 100 characters.",
    "event_type_error": "Event type must be a string and less than 50 characters.",
    "booking_price_error": "Booking price must be a positive number."
  },

  "user_id_integer": "User ID must be an integer.",
  "user_id_required": "User ID is required.",
  "vendor_id_integer": "Vendor ID must be an integer.",
  "code_string": "Code must be a string.",
  "code_required": "Code is required.",
  "description_string": "Description must be a string.",
  "description_required": "Description is required.",
  "invalid_status_in_tickets": "Invalid status value.",
  "body_string": "Body must be a string.",
  "body_required": "Body is required.",
  "user.not_found": "The specified user not found.",
  "vendor.not_found": "The specified vendor not found.",
  "record.not_found": "Record with the specified ID not found.",
  "field_not_found": "Field {field} does not exist in this entity.",
  "duplicate_key": "Duplicate key value violates unique constraint.",
  "record_exists": "Record already exists with the same primary key.",
  "invalid_pagination": "Invalid pagination parameters.",
  "invalid_sort_order": "sortOrder can only be ASC or DESC.",
  "non_existent_fields": "The following field(s) do not exist in the database: {fields}.",
  "non_existent_relation_fields": "The following field(s) do not exist in the database: {fields}, this is a relation.",
  "invalid_enum_value": "Invalid value for field {field}. Allowed values: {values}.",
  "invalid_relations": "Invalid relations: {relations}.",
  "invalid_sort_by": "Invalid sortBy field: {sortBy}.",
  "invalid_exclude_fields": "Invalid fields in fieldsExclude: {fields}.",
  "record_not_found": "Record with ID {id} not found.",
  "record_deleted": "Record with ID {id} deleted successfully.",

  "vendor_not_found": "Vendor with ID {vendor_id} not found.",
  "only_vendors_can_create": "Only vendors can create properties.",
  "city_not_found": "City with ID {city_id} not found.",
  "property_not_found": "Property with ID {id} not found.",
  "country_name_unique": "Country name must be unique.",
  "country_name_unique_with_value": "Country name ({name}) must be unique.",
  "countries_added": "{count} countries added successfully.",
  "city_name_unique": "City name ( {cityName} ) must be unique.",
  "city_country_not_found": "Country with this ID ( {countryId} ) not found.",
  "cities_added_successfully": "{citiesCount} cities added successfully.",
  "cannot_delete_or_update": "Cannot delete or update this record as it is linked to other records.",
  "unexpected_database_error": "An unexpected database error occurred.",

  "city.name_string": "Name must be a string.",
  "city.name_required": "Name is required.",
  "city.country_id_required": "Country ID is required.",
  "city.cities_array": "Cities must be an array.",
  "country.name_string": "Name must be a string.",
  "country.name_required": "Name is required.",
  "country.description_string": "Description must be a string.",

  "property.name_valid_object": "Name must be a valid object.",
  "property.name_required": "Name is required.",
  "property.description_valid_object": "Description must be a valid object.",
  "property.description_required": "Description is required.",
  "property.file_string": "File must be a string.",
  "property.file_required": "File is required.",
  "property.vendor_id_number": "Vendor ID must be a number.",
  "property.vendor_id_required": "Vendor ID is required.",
  "property.city_id_number": "City ID must be a number.",
  "property.city_id_required": "City ID is required.",
  "property.venue_id_number": "Venue ID must be a number.",
  "missing_table_in_from_clause": "Query is missing a necessary table in the FROM clause. Please ensure all referenced tables are included.",

  "venue.occasion_type_not_found": "Occasion type not found",
  "venue.property_not_found": "Property not found",
  "venue.venue_not_found": "Venue with ID {id} not found",
  "venue.venue_not_found_by_id": "Venue with ID {venueId} not found",
  "venue.feature_not_found": "Feature with ID {featureId} not found",

  "venue_name_invalid": "Venue name is invalid.",
  "venue_description_invalid": "Venue description is invalid.",
  "venue_operating_system_invalid": "Operating system is invalid.",
  "venue_lat_invalid": "Latitude must be a number.",
  "venue_lng_invalid": "Longitude must be a number.",
  "venue_phone_invalid": "Phone number is invalid.",
  "venue_email_invalid": "Email is invalid.",
  "venue_contact_person_invalid": "Contact person is invalid.",
  "venue_opens_at_invalid": "Opening time is invalid.",
  "venue_closes_at_invalid": "Closing time is invalid.",
  "venue_area_invalid": "Area must be a number.",
  "venue_max_capacity_invalid": "Maximum capacity must be a number.",
  "venue_min_capacity_invalid": "Minimum capacity must be a number.",
  "venue_is_fixed_setup_invalid": "Fixed setup option must be a boolean.",
  "venue_u_shape_invalid": "U-shape option must be a boolean.",
  "venue_theatre_style_invalid": "Theatre style option must be a boolean.",
  "venue_round_table_invalid": "Round table option must be a boolean.",
  "venue_classroom_invalid": "Classroom option must be a boolean.",
  "venue_property_id_invalid": "Property ID must exist and be a number.",
  "occasion_type_id_invalid": "Occasion type ID must exist and be a number.",

  "service_name_invalid": "Service name is invalid",
  "service_name_required": "Service name is required",
  "service_icon_invalid": "Icon ID is invalid",
  "venue_package_service_invalid": "Package service ID is invalid",
  "service_is_predefined_invalid": "Invalid value for service ID",
  "service_id_invalid": "Service ID is invalid",
  "service_id_required": "Service ID is required",
  "service_price_invalid": "Price is invalid",
  "service_price_required": "Price is required",
  "venue_id_invalid": "Venue ID is invalid",
  "venue_id_required": "Venue ID is required",
  "media.not_found": "Media with ID {id} not found.",
  "venue": {
    "not_found": "Venue with ID {id} not found"
  },
  "service": {
    "not_found": "Service with ID {id} not found",
    "not_found_for_venue": "Service with ID {serviceId} not found for venue with ID {venueId}",
    "removed_from_venue": "Service with ID {serviceId} has been removed from venue with ID {venueId}",
    "already_associated": "This service is already associated with an existing record. Service ID: {serviceId}, Venue ID: {venueId}."
  },

  "createequipment": {
    "name": "Name must be a valid object.",
    "icon_media_id": "Icon media ID must be a number.",
    "is_predefined": "Predefined flag must be a boolean."
  },
  "addequipment": {
    "equipment_id": "Equipment ID must be a number.",
    "equipment_id_required": "Equipment ID is required.",
    "count": "Count must be a number.",
    "count_required": "Count is required.",
    "price": "Price must be a number.",
    "price_required": "Price is required.",
    "price_per": "Price per unit must be a string.",
    "price_per_required": "Price per unit is required."
  },

  "equipment_not_found": "Equipment with ID {equipmentId} not found",
  "venue_equipment_not_found": "Venue equipment with ID {id} not found",
  "venue_equipment_deleted": "Venue equipment with ID {id} deleted successfully.",
  "occasion_type": {
    "name_required": "Name must not be empty.",
    "name_invalid": "Name must be a JSON object."
  }
}